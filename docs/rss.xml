<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Yoruno</title><link>https://yenole.com</link><description>👋 Hey Guys I'm Yoruno.</description><copyright>Yoruno</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/6938587?s=100</url><title>avatar</title><link>https://yenole.com</link></image><lastBuildDate>Thu, 30 Nov 2023 03:59:42 +0000</lastBuildDate><managingEditor>Yoruno</managingEditor><pubDate>Thu, 30 Nov 2023 03:59:42 +0000</pubDate><ttl>60</ttl><webMaster>Yoruno</webMaster><item><title>封装deep-wine应用</title><link>https://yenole.com/post/feng-zhuang-deep-wine-ying-yong.html</link><description>### 原理&#13;
 * 使用7z命令修改官方封装后的files.7z文件&#13;
 &#13;
### 更新微信为例&#13;
 * 下载新版&#13;
```&#13;
wget http://dldir1.qq.com/weixin/Windows/WeChatSetup.exe&#13;
```&#13;
 * 使用deepin-wine命令安装&#13;
 ```&#13;
 # WINEPREFIX设置wine容器目录&#13;
 WINEPREFIX=~/.deepinwine/Deepin-WeChat deepin-wine WeChatSetup.exe&#13;
 ```&#13;
 * 安装好新版微信同window&#13;
 * 新版运行问题就需要解决问题后再封包&#13;
&#13;
### 封装files.7z&#13;
 * 复制files.7z&#13;
 ```&#13;
 # 复制files.7z到容器目录中，为什么是容器目录，是为了后续方便，也可以是其他目录&#13;
 cp /opt/deepinwine/apps/Deepin-WeChat/files.7z ~/.deepinwine/Deepin-WeChat/&#13;
 ```&#13;
 * 删除files.7z文件中旧版微信&#13;
 ```&#13;
 # 其实也可以不删除，直接添加新版到files.7z中&#13;
 7z d ./files.7z drive_c/Program\ Files/Tencent/WeChat/&#13;
 ```&#13;
 * 添加新版本客户端&#13;
 ```&#13;
 # 如果软件有写入注册表数据，还需要添加“system.reg、userdef.reg、user.reg”&#13;
 7z a ./files.7z drive_c/Program\ Files/Tencent/WeChat/&#13;
 ```&#13;
 * 替换原files.7z文件&#13;
 ```&#13;
 # 替换文件&#13;
 sudo cp ./files.7z /opt/deepinwine/apps/Deepin-WeChat/files.7z&#13;
 # 修改run.sh文件版本&#13;
 sudo nano /opt/deepinwine/apps/Deepin-WeChat/run.sh&#13;
 ```&#13;
。</description><guid isPermaLink="true">https://yenole.com/post/feng-zhuang-deep-wine-ying-yong.html</guid><pubDate>Thu, 30 Nov 2023 03:21:13 +0000</pubDate></item><item><title>Docker搭建Redmine</title><link>https://yenole.com/post/Docker-da-jian-Redmine.html</link><description>&#13;
## 搭建Redmine&#13;
## 编辑docker-compose.yml文件&#13;
```&#13;
redmine:&#13;
  image: redmine&#13;
  external_links:&#13;
    - mysql:mysql&#13;
  ports:&#13;
    - 3000:3000&#13;
  environment:&#13;
    - REDMINE_DB_MYSQL:mysql&#13;
    - REDMINE_DB_PASSWORD:数据库密码&#13;
  volumes:&#13;
    - /home/xuchao/ymls/redmine/files:/usr/src/redmine/files&#13;
```&#13;
&#13;
## 编辑nginx代理&#13;
```&#13;
server {&#13;
  listen 0.0.0.0:80;&#13;
  server_name redmine.yenole.com;&#13;
&#13;
  client_max_body_size 100m;&#13;
  &#13;
  location / {&#13;
    proxy_read_timeout      300;&#13;
    proxy_connect_timeout   300;&#13;
    proxy_redirect          off;&#13;
    proxy_buffers 8 8k;&#13;
    proxy_buffer_size 32k;&#13;
    proxy_busy_buffers_size 32k;&#13;
&#13;
    proxy_set_header    Host                $http_host;&#13;
    proxy_set_header    X-Real-IP           $remote_addr;&#13;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;&#13;
    proxy_set_header    X-Frame-Options     SAMEORIGIN;&#13;
&#13;
    proxy_pass http://127.0.0.1:3000;&#13;
  }&#13;
}&#13;
```&#13;
## 常用命令&#13;
* 启动服务：docker-compose up -d&#13;
* 销毁服务：docker-compose down &#13;
* 重启服务：docker-compose restart&#13;
。</description><guid isPermaLink="true">https://yenole.com/post/Docker-da-jian-Redmine.html</guid><pubDate>Thu, 30 Nov 2023 03:19:41 +0000</pubDate></item><item><title>Window10 Shift+右键命令提示符</title><link>https://yenole.com/post/Window10%20Shift%2B-you-jian-ming-ling-ti-shi-fu.html</link><description>## Win+R运行输入regiest.exe&#13;
## 依次进入“HKEY_CLASSES_ROOT\Directory\Background\shell”&#13;
## 显示命令提示符&#13;
 * 右键cmd权限&#13;
 * 高级&#13;
 * 所有者 改成当前用户&#13;
 * 选中“替换子容器和对象的所有者”&#13;
 * 确定&#13;
 * 添加 当前用户&#13;
 * 选中 改成“完全控制”&#13;
 * 确定&#13;
 * 重命名cmd中“HideBasedOnVelocityId”为“ShowBasedOnVelocityId”&#13;
 &#13;
## 隐藏Powershell&#13;
 * 右键Powershell权限&#13;
 * 高级&#13;
 * 所有者 改成当前用户&#13;
 * 选中“替换子容器和对象的所有者”&#13;
 * 确定&#13;
 * 添加 当前用户&#13;
 * 选中 改成“完全控制”&#13;
 * 确定&#13;
 * 重命名Powershell中“ShowBasedOnVelocityId”为“HideBasedOnVelocityId”&#13;
&#13;
&#13;
&#13;
&lt;!-- ##{"timestamp":1504064697}## --&gt;&#13;
。</description><guid isPermaLink="true">https://yenole.com/post/Window10%20Shift%2B-you-jian-ming-ling-ti-shi-fu.html</guid><pubDate>Thu, 30 Nov 2023 03:17:33 +0000</pubDate></item><item><title>Linux挂载磁盘</title><link>https://yenole.com/post/Linux-gua-zai-ci-pan.html</link><description>## 切换root，可以跳过&#13;
```shell&#13;
sudo -i&#13;
```&#13;
&#13;
## 查看当前挂在盘&#13;
```shell&#13;
# Disk /dev/xvdb doesn't contain a valid partition table&#13;
fdisk -l&#13;
```&#13;
## 创建分区&#13;
```shell&#13;
# 创建分区后可以通过fdisk -l查看信息&#13;
fdisk /dev/xvdb&#13;
```&#13;
&#13;
## 格式分区&#13;
```shell&#13;
mkfs.ext3 /dev/xvdb1&#13;
```&#13;
&#13;
## 挂在分区&#13;
```shell&#13;
mkdir /mountdata/&#13;
mount /dev/xvdb1 /mountdata/&#13;
# 开机自动挂在&#13;
echo "/dev/xvdb1	/mountdata	ext3	defaults	0	0"&gt;&gt;/etc/fstab&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{"timestamp":1503985003}## --&gt;&#13;
。</description><guid isPermaLink="true">https://yenole.com/post/Linux-gua-zai-ci-pan.html</guid><pubDate>Thu, 30 Nov 2023 03:15:04 +0000</pubDate></item><item><title>React-native-jsc</title><link>https://yenole.com/post/React-native-jsc.html</link><description># [react-native-jsc](https://github.com/yenole/react-native-jsc)&#13;
&#13;
[![npm version](https://badge.fury.io/js/react-native-jsc.svg)](https://badge.fury.io/js/react-native-jsc)&#13;
&#13;
适用Android、iOS&#13;
&#13;
## 有问题反馈&#13;
在使用中有任何问题，欢迎反馈给我，也可以用以下联系方式跟我交流&#13;
&#13;
* 邮件(Netxy#vip.qq.com, 把#换成@)&#13;
* QQ: 850265689&#13;
&#13;
&#13;
## 添加到项目中&#13;
&#13;
 1. Run `npm install react-native-jsc --save` or `yarn add react-native-jsc`&#13;
 2. react-native link react-native-jsc&#13;
 3. `var Jsc = require('react-native-jsc')`;&#13;
&#13;
&#13;
 ## 方法&#13;
&#13;
- **`obtainPackage(package:string)`** - 这是android包名&#13;
- **`obtain(className:string ,callback:function)`** - 获取一个实例&#13;
- **`fun(jsObj:object ,fun:string ,args:Array ,callback:function)`** - 执行实例函数&#13;
- **`sFun(className:string ,fun:string ,args:Array ,callback:function)`** - 执行类函数&#13;
- **`release(jsObj:object)`** - 销毁obtain获得的实例或通过sFun|fun回调的对象&#13;
&#13;
## 使用&#13;
&#13;
```javascript&#13;
&#13;
import React, {&#13;
    Component&#13;
} from 'react';&#13;
import {&#13;
    AppRegistry,&#13;
    View&#13;
} from 'react-native';&#13;
import Jsc from 'react-native-jsc';&#13;
&#13;
&#13;
export default class RNApp extends Component {&#13;
    constructor(props) {&#13;
        super(props);&#13;
        this.state = {};&#13;
        // 这句只有android平台才使用&#13;
        Jsc.obtainPackage("com.j2ustc.example");&#13;
        Jsc.obtain("Example",function (obj,msg) {&#13;
            console.log(obj);&#13;
            Jsc.fun(obj,"getName",null,function(name,msg){&#13;
                console.log("getName:",name);&#13;
            })&#13;
            Jsc.fun(obj,"setName",["Tom"],function(){});&#13;
            Jsc.fun(obj,"getName",null,function(name,msg){&#13;
                console.log("getName:",name);&#13;
            })&#13;
            Jsc.release(obj);&#13;
        })&#13;
        Jsc.sFun("Example","name",["Jack"],function(ret,msg){&#13;
            console.log(ret);&#13;
        })&#13;
    }&#13;
    render() {&#13;
        return (&#13;
            &lt;View&gt;&lt;/View&gt;&#13;
        );&#13;
    }&#13;
}&#13;
&#13;
```&#13;
&#13;
&#13;
&lt;!-- ##{"timestamp":1503379542}## --&gt;。</description><guid isPermaLink="true">https://yenole.com/post/React-native-jsc.html</guid><pubDate>Tue, 22 Aug 2017 05:25:42 +0000</pubDate></item><item><title>React-native-easy-loading</title><link>https://yenole.com/post/React-native-easy-loading.html</link><description># [react-native-easy-loading](https://github.com/yenole/react-native-easy-loading)&#13;
&#13;
[![npm version](https://badge.fury.io/js/react-native-easy-loading.svg)](https://badge.fury.io/js/react-native-easy-loading)&#13;
&#13;
适用iOS、Android&#13;
&#13;
## 有问题反馈&#13;
在使用中有任何问题，欢迎反馈给我，也可以用以下联系方式跟我交流&#13;
&#13;
* 邮件(Netxy#vip.qq.com, 把#换成@)&#13;
* QQ: 850265689&#13;
&#13;
## 添加到项目中&#13;
&#13;
1. Run `npm install react-native-easy-loading --save` or `yarn add react-native-easy-loading`&#13;
2. `var { Loading, EasyLoading } = require('react-native-easy-loading');`&#13;
&#13;
&#13;
&#13;
## 属性&#13;
&#13;
- **`type`** _(String)_ - 用来区分不同Loading组件。</description><guid isPermaLink="true">https://yenole.com/post/React-native-easy-loading.html</guid><pubDate>Tue, 22 Aug 2017 05:22:58 +0000</pubDate></item><item><title>Nginx动态代理wss</title><link>https://yenole.com/post/Nginx-dong-tai-dai-li-wss.html</link><description>```&#13;
server {&#13;
    listen 443;&#13;
    server_name domain.com;&#13;
&#13;
    // 配置证书&#13;
    ssl on;&#13;
    ssl_certificate     ./ssl/lee.crt;&#13;
    ssl_certificate_key ./ssl/lee.key;&#13;
&#13;
    // wss://domain.com/127.0.0.1/8090/ 解析出IP和PORT并代理&#13;
    location /wss {&#13;
        rewrite '^/wss/(.*)/(.*)$' /wss;&#13;
        set $wss_ip $1;&#13;
        set $wss_port $2;&#13;
        break;&#13;
&#13;
        access_log off;&#13;
        proxy_pass http://$wss_ip:$wss_port;&#13;
        proxy_set_header X-Real-IP $remote_addr;&#13;
        proxy_set_header Host $host;&#13;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#13;
&#13;
        # WebSocket support (nginx 1.4)&#13;
        proxy_http_version 1.1;&#13;
        proxy_set_header Upgrade $http_upgrade;&#13;
        proxy_set_header Connection "upgrade";&#13;
    }&#13;
}&#13;
````&#13;
&#13;
&#13;
&lt;!-- ##{"timestamp":1503316458}## --&gt;。</description><guid isPermaLink="true">https://yenole.com/post/Nginx-dong-tai-dai-li-wss.html</guid><pubDate>Mon, 21 Aug 2017 11:54:18 +0000</pubDate></item><item><title>关于</title><link>https://yenole.com/post/guan-yu.html</link><description># 👋 Hey Guys I'm Yoruno.&#13;
&#13;
- 👾 My Blog : [yenole.com](https://yenole.com)&amp;nbsp;&amp;nbsp;&amp;nbsp;📊 Visitor : &lt;img src="https://profile-counter.glitch.me/yenole/count.svg" width="140"/&gt;&#13;
&#13;
  [![Java](https://img.shields.io/badge/Java-orange?style=flat&amp;logo=java)](https://github.com/yenole)&#13;
  [![Java](https://img.shields.io/badge/Spring-gray?style=flat&amp;logo=spring)](https://github.com/yenole)&#13;
  [![MySQL](https://img.shields.io/badge/-MySQL-0175C2?style=flat&amp;logo=mysql&amp;logoColor=black)](https://github.com/yenole)&#13;
  [![Git](https://img.shields.io/badge/-Git-black?style=flat&amp;logo=git&amp;link=https://github.com/yenole)](https://github.com/yenole)&#13;
  [![JavaScript](https://img.shields.io/badge/-JavaScript-black?style=flat&amp;logo=javascript&amp;link=https://github.com/yenole)](https://github.com/yenole)&#13;
。</description><guid isPermaLink="true">https://yenole.com/post/guan-yu.html</guid><pubDate>Thu, 30 Nov 2023 03:59:12 +0000</pubDate></item></channel></rss>